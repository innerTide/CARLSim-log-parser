"""This is a Python script to parse the log file generated by CARLSim."""

import re

# Parsing Number of input and output neurons


def neuronNumberParser(log_str):
    """Return (input_number, output_number)."""
    input_number_re = re.compile('Group\sinput.*\n[^0-9]+[0-9]+', flags=0)
    input_number = input_number_re.search(log_str)
    input_number = re.compile('Group\sinput.*\n[^0-9]+', flags=0)\
                     .sub('', input_number.group())
    input_number = int(input_number)

    output_number_re = re.compile('Group\soutput.*\n[^0-9]+[0-9]+', flags=0)
    output_number = output_number_re.search(log_str)
    output_number = re.compile('Group\soutput.*\n[^0-9]+', flags=0)\
                      .sub('', output_number.group())
    output_number = int(output_number)

    return input_number, output_number

# Parsing the connection table
# The return value is a dictionary {int, [int(s)]}.
# The first integer is input neuron ID
# and the array contains all the node connected.


def connectionTableParser(log_str):
    """Return the array of connection pairs."""
    pattern = re.compile('(\[\s*[0-9]+,\s*[0-9]+\]\s(([0-9]|\.)+|nan)\s+\n?)+',
                         flags=0)
    connection_table_list = pattern.search(log_str).group()
    connection_table_list = re.compile('\s(nan|([0-9]+\.[0-9]+))\s+', flags=0)\
                              .sub(';', connection_table_list).strip()
    connection_table_list = re.compile('\s+', flags=0)\
                              .sub('', connection_table_list)\
                              .split(';')
    connection_table_list.pop()
    connection_table = {}

    for pair in connection_table_list:
        pair = re.compile('\[|\]', flags=0).sub('', pair).split(',')
        if int(pair[0]) not in connection_table:
            connection_table[int(pair[0])] = [int(pair[1])]
        else:
            connection_table[int(pair[0])]\
                            .append(int(pair[1]))

    return connection_table

# Parsing the spiking times


def spikingTimeParser(log_str):
    """Return the spiking times of each neuron."""
    first_line_re = '\|\s*[0-9]+\s*\|\s*[0-9]+\.[0-9]+\s*\|([\s]*[0-9]+)+\s+'
    rest_line_re = '(\|\s+\|\s+\|(\s*[0-9]+)+\s+)*'
    pattern = re.compile(first_line_re + rest_line_re, flags=0)
    time_table = pattern.finditer(log_str)
    spiking_time = {}

    for i in time_table:
        time_list = i.group().replace('|', '').strip()
        time_list = re.compile('\s+', flags=0).split(time_list)
        neuron_id = int(time_list.pop(0))
        time_list.pop(0)
        time_list = [int(i) for i in time_list]
        spiking_time[neuron_id] = time_list

    return spiking_time


log_file = open('test.log', mode='r')
output_file = open('parse_result.txt', mode='w')
log_file_string = log_file.read()

# Build the node mapping file
# Only consider two groups: input and output
# Mapping input as the first step

input_number, output_number = neuronNumberParser(log_file_string)

node_mapping_file = open('node_mapping.txt', mode='w')

for i in range(input_number):
    node_mapping_file.write('0 %d %d\n' % (i, i))
for i in range(output_number):
    node_mapping_file.write('1 %d %d\n' % (i, i+input_number))

node_mapping_file.close()

output_file.write('There are %d neurons as input and %d neurons as output.\n' %
                  (input_number, output_number))

# Build connection table file
# Format:
# [Number of groups (currently is set to 2)]
# Iteration{
# [Source group ID]_[Source neuron ID]_[Number of destinations]
# [Destination group ID (currently is set to 1)]
# [Destination neuron IDs]
# }End of iteration

connection_table = connectionTableParser(log_file_string)

connection_table_file = open('connection_table.txt', mode='w')

connection_table_file.write('2\n')
for key in connection_table:
    connection_table_file.write('0 %d %d\n1\n'
                                % (key, len(connection_table[key])))
    output_file.write('\n\nNeuron %d is connected to\n' % key)
    for i in connection_table[key]:
        connection_table_file.write('%d ' % i)
        output_file.write('%d, ' % i)
    connection_table_file.write('\n')

connection_table_file.close()

# Build traffic table file
# Format:
# [Spiking time]_[Group ID]_[Neuron ID]

spiking_time = spikingTimeParser(log_file_string)

traffic_file = open('traffic.txt', mode='w')

for key in spiking_time:
    output_file.write('\n\nNeuron %d spikes at\n' % key)
    for i in spiking_time[key]:
        traffic_file.write('%d 0 %d\n' % (i, key))
        output_file.write('%d, ' % i)

traffic_file.close()

log_file.close()
output_file.close()
